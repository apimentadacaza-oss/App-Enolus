// Using CommonJS for compatibility with a simple `node` execution environment.
const fs = require('fs');
const path = require('path');

const LOCALES_DIR = path.resolve(__dirname, '../i18n/locales');
const OUTPUT_FILE = path.resolve(__dirname, '../i18n/resources.d.ts');

const main = () => {
  try {
    const resources = {};
    const namespaces = new Set();
    let defaultLangForTypes = null;

    const langDirs = fs.readdirSync(LOCALES_DIR);

    for (const lang of langDirs) {
      const langPath = path.join(LOCALES_DIR, lang);
      if (fs.statSync(langPath).isDirectory()) {
        if (!defaultLangForTypes) defaultLangForTypes = lang; // Use the first language found for type shapes
        resources[lang] = {};
        const nsFiles = fs.readdirSync(langPath);
        for (const nsFile of nsFiles) {
          if (nsFile.endsWith('.json')) {
            const ns = path.basename(nsFile, '.json');
            namespaces.add(ns);
          }
        }
      }
    }
    
    if (!defaultLangForTypes) {
      console.error('No language files found in locales directory.');
      process.exit(1);
    }
    
    const sortedNamespaces = Array.from(namespaces).sort();

    const typeDeclarations = `// This file is auto-generated by the i18n type-generation script. Do not edit manually.
import 'i18next';

${sortedNamespaces.map(ns => `import ${ns} from './locales/${defaultLangForTypes}/${ns}.json';`).join('\n')}

declare module 'i18next' {
  interface CustomTypeOptions {
    defaultNS: 'home';
    resources: {
      ${sortedNamespaces.map(ns => `${ns}: typeof ${ns};`).join('\n      ')}
    };
  }
}
`;

    fs.writeFileSync(OUTPUT_FILE, typeDeclarations, 'utf-8');
    console.log(`✅ i18n types generated successfully at ${path.relative(process.cwd(), OUTPUT_FILE)}`);

  } catch (error) {
    console.error('❌ Error generating i18n types:', error);
    process.exit(1);
  }
};

main();
